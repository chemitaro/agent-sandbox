# Sandbox Project Makefile
# ========================

# Configuration
CONFIG_FILE := sandbox.config
ENV_FILE := .env

# Dynamic values
CURRENT_DIR := $(shell pwd)
CURRENT_USER := $(shell whoami)
GIT_ROOT := $(shell git rev-parse --show-toplevel 2>/dev/null || echo $(CURRENT_DIR))

# Include .env if it exists
-include $(ENV_FILE)

# Default values
SOURCE_PATH ?= $(HOME)/workspace/product

# Export environment variables for Docker Compose
export HOST_SANDBOX_PATH := $(GIT_ROOT)
export HOST_USERNAME := $(CURRENT_USER)
export SOURCE_PATH
export TZ

# Detect timezone
.PHONY: detect-timezone
detect-timezone:
	@if [ -n "$$TZ" ]; then \
		echo "$$TZ"; \
	elif [ -L /etc/localtime ]; then \
		readlink /etc/localtime | sed 's|.*/zoneinfo/||'; \
	elif [ -f /etc/timezone ]; then \
		cat /etc/timezone; \
	elif command -v timedatectl >/dev/null 2>&1; then \
		timedatectl | grep "Time zone" | awk '{print $$3}'; \
	else \
		echo "Asia/Tokyo"; \
	fi

# Get detected timezone
DETECTED_TZ := $(shell \
	if [ -n "$$TZ" ]; then \
		echo "$$TZ"; \
	elif [ -L /etc/localtime ]; then \
		readlink /etc/localtime | sed 's|.*/zoneinfo/||'; \
	elif [ -f /etc/timezone ]; then \
		cat /etc/timezone; \
	elif command -v timedatectl >/dev/null 2>&1; then \
		timedatectl | grep "Time zone" | awk '{print $$3}'; \
	else \
		echo "Asia/Tokyo"; \
	fi)
export TZ := $(DETECTED_TZ)

# Generate .env file
.PHONY: generate-env
generate-env:
	@echo "🔧 Generating .env file..."
	@if [ ! -f $(CONFIG_FILE) ]; then \
		echo "❌ Error: $(CONFIG_FILE) not found!"; \
		echo "📝 Please create it from sandbox.config.example:"; \
		echo "   cp sandbox.config.example sandbox.config"; \
		exit 1; \
	fi
	@echo "# Auto-generated by Makefile - DO NOT EDIT" > $(ENV_FILE)
	@echo "# Generated at: $$(date)" >> $(ENV_FILE)
	@echo "" >> $(ENV_FILE)
	@echo "# User Configuration" >> $(ENV_FILE)
	@# すべての環境変数を抽出（コメント行と空行を除外）
	@grep -E '^[[:space:]]*[A-Z_][A-Z0-9_]*[[:space:]]*=' $(CONFIG_FILE) | sed 's/[[:space:]]*=[[:space:]]*/=/' >> $(ENV_FILE) || true
	@# TZが設定されていない場合は自動検出値を使用
	@if ! grep -q "^TZ=" $(ENV_FILE); then \
		echo "TZ=$(DETECTED_TZ)" >> $(ENV_FILE); \
	fi
	@echo "" >> $(ENV_FILE)
	@echo "# Auto-detected Values" >> $(ENV_FILE)
	@echo "HOST_SANDBOX_PATH=$(GIT_ROOT)" >> $(ENV_FILE)
	@echo "HOST_USERNAME=$(CURRENT_USER)" >> $(ENV_FILE)
	@# SOURCE_PATHと同じ値をHOST_PRODUCT_PATHに設定
	@SOURCE_PATH=$$(grep -E '^[[:space:]]*SOURCE_PATH[[:space:]]*=' $(CONFIG_FILE) | sed 's/^[^=]*=//' | xargs); \
	if [ -n "$$SOURCE_PATH" ]; then \
		echo "HOST_PRODUCT_PATH=$$SOURCE_PATH" >> $(ENV_FILE); \
	fi
	@echo "" >> $(ENV_FILE)
	@echo "✅ .env file generated successfully!"

# Validate configuration
.PHONY: validate-config
validate-config: generate-env
	@echo "🔍 Validating configuration..."
	@if ! grep -q "^SOURCE_PATH=.." $(ENV_FILE); then \
		echo "❌ Error: Source path is not set in $(CONFIG_FILE)"; \
		echo "   This is a required setting."; \
		exit 1; \
	fi
	@SOURCE_PATH=$$(grep "^SOURCE_PATH=" $(ENV_FILE) | cut -d'=' -f2); \
	if [ ! -d "$$SOURCE_PATH" ]; then \
		echo "⚠️  Warning: Source path '$$SOURCE_PATH' does not exist"; \
		echo "   Container will start but the directory will be empty"; \
	fi
	@if ! grep -q "^GH_TOKEN=.." $(ENV_FILE); then \
		echo "ℹ️  Note: GitHub token is not set"; \
		echo "   Some features may be limited"; \
	fi
	@echo "✅ Configuration is valid!"

# Initialize configuration
.PHONY: init
init:
	@if [ -f $(CONFIG_FILE) ]; then \
		echo "⚠️  $(CONFIG_FILE) already exists"; \
	else \
		cp sandbox.config.example $(CONFIG_FILE); \
		echo "✅ Created $(CONFIG_FILE) from example"; \
		echo "📝 Please edit $(CONFIG_FILE) with your settings"; \
	fi

# Show current configuration
.PHONY: show-config
show-config: generate-env
	@echo "📊 Current Configuration:"
	@echo "─────────────────────────"
	@echo "User Settings (from $(CONFIG_FILE)):"
	@if [ -f $(CONFIG_FILE) ]; then \
		grep -E '^[[:space:]]*[A-Z_][A-Z0-9_]*[[:space:]]*=' $(CONFIG_FILE) | sed 's/=/ = /' || true; \
	else \
		echo "  No configuration file found"; \
	fi
	@echo ""
	@echo "Auto-detected Values:"
	@echo "  Sandbox Path = $(GIT_ROOT)"
	@echo "  Username = $(CURRENT_USER)"
	@echo "  Timezone = $(DETECTED_TZ)"
	@echo "─────────────────────────"

# Clean generated files
.PHONY: clean-env
clean-env:
	@echo "🧹 Removing generated .env file..."
	@rm -f $(ENV_FILE)
	@echo "✅ Cleaned up"

# Docker Compose Commands (updated)
.PHONY: up
up: validate-config
	@echo "🚀 Starting Claude Code Sandbox..."
	@docker-compose up -d
	@echo "✅ Container started. Run 'make shell' to connect."

.PHONY: down
down:
	@echo "🛑 Stopping Claude Code Sandbox..."
	@docker-compose down

.PHONY: shell
shell:
	@echo "🔗 Connecting to Claude Code Sandbox..."
	@docker-compose exec claude-code-sandbox /bin/zsh

.PHONY: shell-product
shell-product:
	@echo "🔗 Connecting to product directory..."
	@docker-compose exec -w /srv/product claude-code-sandbox /bin/zsh

.PHONY: logs
logs:
	@docker-compose logs -f claude-code-sandbox

.PHONY: restart
restart:
	@echo "🔄 Restarting Claude Code Sandbox..."
	@docker-compose restart

.PHONY: status
status:
	@echo "📊 Container Status:"
	@docker-compose ps

.PHONY: build
build:
	@echo "🔨 Building Claude Code Sandbox image..."
	@docker-compose build --no-cache
	@echo "✅ Build completed."

.PHONY: rebuild
rebuild:
	@echo "🔄 Rebuilding and restarting Claude Code Sandbox..."
	@docker-compose down
	@docker-compose build --no-cache
	@docker-compose up -d
	@echo "✅ Container rebuilt and started. Run 'make shell' to connect."

# Claude Assistant (kept from original)
.PHONY: claude
claude:
	@echo "🤖 Starting Claude session..."
	@claude --dangerously-skip-permissions

# Help command
.PHONY: help
help:
	@echo "Sandbox Project - Available Commands:"
	@echo "────────────────────────────────────"
	@echo "Configuration:"
	@echo "  make init          - Initialize sandbox.config from example"
	@echo "  make show-config   - Display current configuration"
	@echo "  make validate-config - Validate configuration"
	@echo "  make clean-env     - Remove generated .env file"
	@echo ""
	@echo "Container Management:"
	@echo "  make up            - Start the container (auto-generates .env)"
	@echo "  make down          - Stop the container"
	@echo "  make restart       - Restart the container"
	@echo "  make rebuild       - Rebuild and restart the container"
	@echo "  make status        - Show container status"
	@echo ""
	@echo "Shell Access:"
	@echo "  make shell         - Connect to the container"
	@echo "  make shell-product - Connect directly to /srv/product"
	@echo "  make logs          - View container logs"
	@echo ""
	@echo "Development:"
	@echo "  make claude        - Start Claude Code session"
	@echo "────────────────────────────────────"

# Default target
.DEFAULT_GOAL := help